***(
Copyright 2021-2025 Universitat Politècnica de València, Spain

This program is free software: you can redistribute it and/or modify it under the terms 
of the GNU General Public License as published by the Free Software Foundation, either 
version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
)***

fmod NAT-ADD-SUB is 
    protecting TRUTH-VALUE .
    sort Natural .
    ops 0 1 : -> Natural [ctor] .
    op _+_ : Natural Natural -> Natural [ctor assoc comm id: 0] .

    vars n m : Natural .

    op _>_ : Natural Natural -> Bool . 
    op _<=_ : Natural Natural -> Bool .

    eq m + n + 1 > n = true [variant] . 
    eq n > n + m = false [variant] .

    eq n <= m + n = true [variant] .
    eq m + n + 1 <= n = false [variant] .

    op _-_ : Natural Natural -> [Natural] .  *** monus
    eq (n + m) - n = m [variant] .
endfm


mod BANK-ACCOUNT is 
    protecting NAT-ADD-SUB . 

    sorts Account Msg MsgConf State StatePair .
    subsort  Msg < MsgConf .

    op < bal:_pend:_overdraft:_> : Natural Natural Bool -> Account [ctor] . 
    op mt : -> MsgConf [ctor] .
    op withdraw : Natural -> Msg [ctor] .
    op _,_ : MsgConf MsgConf -> MsgConf [ctor assoc comm id: mt] . 
    op _#_ : Account MsgConf -> State [ctor] .  ***  state ctor

    vars n n' m x x' : Natural .   var msgs : MsgConf .


    *** requesting to draw money having sufficient funds; the amount
    *** requested is added to the amount of pending withdraw requests
    rl [w-req] : < bal: n + m + x pend: x overdraft: false > # msgs => 
                    < bal: n + m + x pend: x + m overdraft: false > # withdraw(m),msgs [narrowing] .

    *** more money can be deposited in the account if not in overdraft
    rl [dep] :  < bal: n pend: x overdraft: false > # msgs =>
                    < bal: n + m pend: x overdraft: false > # msgs [narrowing nonexec] .

    *** actual withdrawing of money from account
    crl [w1] :  < bal: n pend: x overdraft: false > # withdraw(m),msgs => 
                    < bal: n pend: x overdraft: true > # msgs  
                        if m > n .

    *** actual withdrawing of money from account
    crl [w2] :  < bal: n pend: x overdraft: false > # withdraw(m),msgs => 
                    < bal: n' pend: x' overdraft: false > # msgs  
                        if m <= n /\ n' = (n - m) /\ x' = (x - m) [nonexec] .    
endm